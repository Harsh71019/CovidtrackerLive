{"version":3,"sources":["components/Cards/Cards.module.css","images/1.jpg","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/CountryPicker/CountryPicker.module.css","App.module.css","components/Chart/Chart.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","Typo","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","console","log","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChar","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchApi","FormControl","NativeSelect","Select","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","heading","React","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.a87818c9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3Mji7\",\"card\":\"Cards_card__2ArKD\",\"infected\":\"Cards_infected__1HJxf\",\"recovered\":\"Cards_recovered__OouZt\",\"deaths\":\"Cards_deaths__1C1YU\"};","module.exports = __webpack_public_path__ + \"static/media/1.79bcaa6d.jpg\";","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport styles from \"./Cards.module.css\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return \"Loading....\";\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"centers\">\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.infected)}\r\n        >\r\n          <CardContent>\r\n            <Typography className={styles.Typo} color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              {\" \"}\r\n              Number of Active Cases of Covid 19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.recovered)}\r\n        >\r\n          {\" \"}\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>{\" \"}\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              REAL DATE\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              {\" \"}\r\n              Number of Recovered Cases of Covid 19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.deaths)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>{\" \"}\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              REAL DATE\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              {\" \"}\r\n              Number of Deaths of Covid 19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changeableUrl);\r\n    const modifiedData = {\r\n      confirmed,\r\n      recovered,\r\n      deaths,\r\n      lastUpdate,\r\n    };\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styles from \"./Chart.module.css\";\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Infected\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255,0,0,0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const barChar = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"infected\", \"recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={styles.container}>{country ? barChar : lineChart}</div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport styles from \"./CountryPicker.module.css\";\r\nimport { fetchCountries } from \"../../api\";\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    };\r\n    fetchApi();\r\n  }, [setFetchedCountries]);\r\n\r\n  return (\r\n    <div>\r\n      <FormControl className={styles.FormControl}>\r\n        <NativeSelect className={styles.Select}\r\n          defaultValue=\"\"\r\n          onChange={(e) => handleCountryChange(e.target.value)}\r\n        >\r\n          <option value=\"\">Global</option>\r\n          {fetchedCountries.map((country, i) => (\r\n            <option key={{ i }} value={country}>\r\n              {\" \"}\r\n              {country}{\" \"}\r\n            </option>\r\n          ))}\r\n        </NativeSelect>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React from \"react\";\r\nimport { Cards, Chart, CountryPicker } from \"./components\";\r\nimport styles from \"./App.module.css\";\r\nimport { fetchData } from \"./api\";\r\nimport coronaImage from './images/1.jpg';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    data: {},\r\n    country: \"\",\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n    this.setState({ data: fetchedData });\r\n    console.log(fetchedData);\r\n  }\r\n\r\n  handleCountryChange = async (country) => {\r\n    const fetchedData = await fetchData(country);\r\n    this.setState({ data: fetchedData, country: country });\r\n  };\r\n\r\n  render() {\r\n    const { data, country } = this.state;\r\n    return (\r\n      <div className={styles.container}>\r\n        <h1 className={styles.heading}>Live Covid Tracker!</h1>\r\n        <Cards data={data} />\r\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n        <Chart data={data} country={country} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDom from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDom.render(<App />, document.getElementById(\"root\"));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__DcACH\",\"Select\":\"CountryPicker_Select__1viR6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"App_heading__3fL3u\",\"container\":\"App_container__3NzVd\",\"image\":\"App_image__3ZJvM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__LRepq\"};"],"sourceRoot":""}